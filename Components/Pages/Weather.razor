@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject OpenMeteoService OpenMeteoService
@inject NominatimService NominatimService

<PageTitle>Weather</PageTitle>

<h1>Weather Forecast</h1>

<p>Get real-time weather forecasts for any location worldwide.</p>

<div class="mb-3">
    <label for="locationInput" class="form-label">Location</label>
    <input id="locationInput" class="form-control" @bind="locationQuery" @onkeypress="HandleKeyPress" placeholder="Enter city name..." />
    <div class="form-text">Type a location and press Enter to search</div>
</div>

@if (searchResults.Any())
{
    <div class="mb-3">
        <h5>Select a location:</h5>
        <div class="list-group">
            @foreach (var location in searchResults)
            {
                <button type="button" class="list-group-item list-group-item-action" @onclick="() => SelectLocation(location)">
                    <div class="d-flex w-100 justify-content-between">
                        <h6 class="mb-1">@location.Name</h6>
                        <small>@location.Country</small>
                    </div>
                    <p class="mb-1">@location.DisplayName</p>
                </button>
            }
        </div>
    </div>
}

@if (selectedLocation != null)
{
    <div class="alert alert-info">
        <strong>Selected location:</strong> @selectedLocation.DisplayName
    </div>
}

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading weather data...</span>
        </div>
    </div>
}
else if (forecasts != null && forecasts.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>High Temp. (°C)</th>
                <th>Low Temp. (°C)</th>
                <th>High Temp. (°F)</th>
                <th>Low Temp. (°F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC.ToString("F1")</td>
                    <td>@forecast.TemperatureMinC.ToString("F1")</td>
                    <td>@forecast.TemperatureF.ToString("F1")</td>
                    <td>@forecast.TemperatureMinF.ToString("F1")</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (hasSearched && !isLoading)
{
    <div class="alert alert-warning">
        No weather data available. Please select a location to get the forecast.
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @errorMessage
    </div>
}

@code {
    private string locationQuery = "";
    private LocationSearchResult[] searchResults = Array.Empty<LocationSearchResult>();
    private LocationSearchResult? selectedLocation;
    private WeatherForecast[]? forecasts;
    private bool isLoading = false;
    private bool hasSearched = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Set default location to New York for demonstration
        await LoadDefaultLocation();
    }

    private async Task LoadDefaultLocation()
    {
        try
        {
            selectedLocation = new LocationSearchResult
            {
                Name = "New York",
                DisplayName = "New York, NY, United States",
                Country = "United States",
                State = "New York",
                Lat = 40.7128m,
                Lon = -74.0060m
            };
            await LoadWeatherData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load default location: {ex.Message}";
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(locationQuery))
        {
            await SearchLocations();
        }
    }

    private async Task SearchLocations()
    {
        try
        {
            errorMessage = "";
            isLoading = true;
            searchResults = await NominatimService.SearchLocationsAsync(locationQuery);
            hasSearched = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to search locations: {ex.Message}";
            searchResults = Array.Empty<LocationSearchResult>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SelectLocation(LocationSearchResult location)
    {
        selectedLocation = location;
        searchResults = Array.Empty<LocationSearchResult>();
        locationQuery = location.Name ?? "";
        await LoadWeatherData();
    }

    private async Task LoadWeatherData()
    {
        if (selectedLocation == null) return;

        try
        {
            errorMessage = "";
            isLoading = true;
            forecasts = await OpenMeteoService.GetWeatherForecastAsync(selectedLocation.Lat, selectedLocation.Lon);
            hasSearched = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load weather data: {ex.Message}";
            forecasts = null;
        }
        finally
        {
            isLoading = false;
        }
    }
}
