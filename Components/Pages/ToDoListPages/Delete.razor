@page "/todolists/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorWebAppMovies.Models
@inject IDbContextFactory<BlazorWebAppMovies.Data.BlazorWebAppMoviesContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete To-Do List</PageTitle>

@if (toDoList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Delete</h1>

    <h3>Are you sure you want to delete this to-do list?</h3>
    <div class="alert alert-warning">
        <strong>Warning:</strong> This will also delete all @toDoList.Items.Count items in this list.
    </div>
    
    <div>
        <h4>To-Do List</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@toDoList.Name</dd>
            <dt class="col-sm-2">Created</dt>
            <dd class="col-sm-10">@toDoList.CreatedDate.ToString("MMM dd, yyyy")</dd>
            <dt class="col-sm-2">Items</dt>
            <dd class="col-sm-10">
                @toDoList.Items.Count total
                (@toDoList.Items.Count(i => i.IsCompleted) completed, @toDoList.Items.Count(i => !i.IsCompleted) remaining)
            </dd>
        </dl>

        @if (toDoList.Items.Any())
        {
            <h5>Items that will be deleted:</h5>
            <ul class="list-unstyled">
                @foreach (var item in toDoList.Items.Take(5))
                {
                    <li class="@(item.IsCompleted ? "text-decoration-line-through text-muted" : "")">
                        @item.Name
                    </li>
                }
                @if (toDoList.Items.Count > 5)
                {
                    <li class="text-muted">... and @(toDoList.Items.Count - 5) more items</li>
                }
            </ul>
        }

        <EditForm method="post" Model="toDoList" OnValidSubmit="DeleteToDoList" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger">Delete</button> |
            <a href="/todolists" class="btn btn-secondary">Cancel</a>
        </EditForm>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private ToDoList? toDoList;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        toDoList = await context.ToDoList
            .Include(l => l.Items)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (toDoList is null)
        {
            NavigationManager.NavigateTo("/todolists");
        }
    }

    private async Task DeleteToDoList()
    {
        using var context = DbFactory.CreateDbContext();
        
        // Load the list with items
        var listToDelete = await context.ToDoList
            .Include(l => l.Items)
            .FirstOrDefaultAsync(l => l.Id == Id);
            
        if (listToDelete != null)
        {
            // Delete all items first
            context.ToDoItem.RemoveRange(listToDelete.Items);
            // Then delete the list
            context.ToDoList.Remove(listToDelete);
            await context.SaveChangesAsync();
        }

        NavigationManager.NavigateTo("/todolists");
    }
}