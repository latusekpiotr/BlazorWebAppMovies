@page "/movies/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorWebAppMovies.Models
@inject IDbContextFactory<BlazorWebAppMovies.Data.BlazorWebAppMoviesContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Movie</PageTitle>

<div class="page-header">
    <div class="container">
        <h1 class="page-title">üóëÔ∏è Delete Movie</h1>
        <p class="page-subtitle">Permanently remove movie from collection</p>
    </div>
</div>

<div class="container">
    <div class="confirmation-card">
        <div class="confirmation-header">
            <span class="warning-icon">‚ö†Ô∏è</span>
            <p class="confirmation-message">Are you sure you want to delete this movie?</p>
            <p class="confirmation-submessage">This action cannot be undone.</p>
        </div>
        
        @if (movie is null)
        {
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <span>Loading movie details...</span>
            </div>
        }
        else 
        {
            <div class="movie-header">
                <h2 class="movie-title">
                    üé¨ @movie.Title
                    <span class="movie-rating">@movie.Rating</span>
                </h2>
            </div>
            
            <div class="movie-body">
                <div class="movie-details-grid">
                    <div class="detail-item">
                        <div class="detail-label">
                            üìÖ Release Date
                        </div>
                        <p class="detail-value date">@movie.ReleaseDate.ToString("MMMM dd, yyyy")</p>
                    </div>
                    
                    <div class="detail-item">
                        <div class="detail-label">
                            üé≠ Genre
                        </div>
                        <p class="detail-value genre">@movie.Genre</p>
                    </div>
                    
                    <div class="detail-item">
                        <div class="detail-label">
                            üí∞ Price
                        </div>
                        <p class="detail-value price">@movie.Price.ToString("C")</p>
                    </div>
                    
                    <div class="detail-item">
                        <div class="detail-label">
                            ‚≠ê Rating
                        </div>
                        <p class="detail-value">@movie.Rating</p>
                    </div>
                </div>
            </div>
            
            <EditForm method="post" Model="movie" OnValidSubmit="DeleteMovie" FormName="delete" Enhance>
                <div class="actions-section">
                    <a href="/movies" class="btn-secondary">
                        ‚Üê Cancel
                    </a>
                    <button type="submit" class="btn-danger" disabled="@(movie is null)">
                        üóëÔ∏è Delete Movie
                    </button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    private Movie? movie;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        movie = await context.Movie.FirstOrDefaultAsync(m => m.Id == Id);

        if (movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteMovie()
    {
        using var context = DbFactory.CreateDbContext();
        context.Movie.Remove(movie!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/movies");
    }
}
