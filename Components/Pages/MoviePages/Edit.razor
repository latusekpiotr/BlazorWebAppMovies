@page "/Movies/edit"
@using Microsoft.EntityFrameworkCore
@using BlazorWebAppMovies.Models
@inject IDbContextFactory<BlazorWebAppMovies.Data.BlazorWebAppMoviesContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Movie</PageTitle>

<div class="page-header">
    <div class="container">
        <h1 class="page-title">‚úèÔ∏è Edit Movie</h1>
        <p class="page-subtitle">Update movie information</p>
    </div>
</div>

<div class="container">
    @if (Movie is null)
    {
        <div class="form-container">
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <span>Loading movie details...</span>
            </div>
        </div>
    }
    else
    {
        <div class="form-container">
            <div class="form-header">
                <h2 class="form-title">
                    üé¨ @Movie.Title
                </h2>
            </div>
            
            <EditForm method="post" Model="Movie" OnValidSubmit="UpdateMovie" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                
                <div class="form-body">
                    <input type="hidden" name="Movie.Id" value="@Movie.Id" />
                    
                    <div class="form-grid">
                        <div class="form-field">
                            <label for="title" class="form-label">üé¨ Movie Title</label>
                            <InputText id="title" @bind-Value="Movie.Title" class="form-control" placeholder="Enter movie title..." />
                            <ValidationMessage For="() => Movie.Title" class="text-danger" />
                        </div>
                        
                        <div class="form-field">
                            <label for="releasedate" class="form-label">üìÖ Release Date</label>
                            <InputDate id="releasedate" @bind-Value="Movie.ReleaseDate" class="form-control" />
                            <ValidationMessage For="() => Movie.ReleaseDate" class="text-danger" />
                        </div>
                        
                        <div class="form-field">
                            <label for="genre" class="form-label">üé≠ Genre</label>
                            <InputText id="genre" @bind-Value="Movie.Genre" class="form-control" placeholder="e.g., Action, Comedy, Drama..." />
                            <ValidationMessage For="() => Movie.Genre" class="text-danger" />
                        </div>
                        
                        <div class="form-field">
                            <label for="price" class="form-label">üí∞ Price</label>
                            <InputNumber id="price" @bind-Value="Movie.Price" class="form-control" placeholder="0.00" />
                            <ValidationMessage For="() => Movie.Price" class="text-danger" />
                        </div>
                        
                        <div class="form-field">
                            <label for="rating" class="form-label">‚≠ê Rating</label>
                            <InputText id="rating" @bind-Value="Movie.Rating" class="form-control" placeholder="G, PG, PG-13, R, NC-17" />
                            <ValidationMessage For="() => Movie.Rating" class="text-danger" />
                        </div>
                    </div>
                </div>
                
                <div class="form-actions">
                    <a href="/movies" class="btn-secondary">
                        ‚Üê Cancel
                    </a>
                    <button type="submit" class="btn-primary">
                        üíæ Save Changes
                    </button>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Movie? Movie { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Movie ??= await context.Movie.FirstOrDefaultAsync(m => m.Id == Id);

        if (Movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateMovie()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Movie!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MovieExists(Movie!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/movies");
    }

    private bool MovieExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Movie.Any(e => e.Id == id);
    }
}
